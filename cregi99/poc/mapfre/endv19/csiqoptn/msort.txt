         MACRO
         MSORT &KEYSTRT=,&KEYLEN=,&SORT=A
.*  TITLE 'MSORT'
.*
.*  COPYRIGHT (C) 2022 BROADCOM. ALL RIGHTS RESERVED.
.*
.*  THIS MACRO SORTS A TABLE INTO ALPHAMERIC ASCENDING SEQUENCE
.*  USING A SHELL SORT METHOD OF SORTING.
.*
.*  SHELL SORT DIFFERS FROM THE USUAL EXCHANGE SORT OR BUBBLE SORT
.*  IN THAT IT COMPARES FAR APART ELEMENTS FIRST, THEREBY BRINGING
.*  ORDER INTO THE TABLE AT AN EARLY STAGE.  IT RUNS ON THE O(N**1.5)
.*  WHICH IS SUBSTANTIALLY FASTER THAN AN INTERCHANGE SORT'S O(N**2)
.*
.*  A FULL DISCUSSION OF THIS TECHNIQUE IS TO BE FOUND EITHER IN
.*  KNUTH'S SORTING AND SEARCHING OR THE ELEMENTS OF PROGRAMMING
.*  STYLE BY KERRINGHAN AND PLAUGER.
.*
.*  INPUT IS IN &TABLE1.  THE SORTED OUTPUT IS PLACED THERE ALSO.
.*
.*
         GBLA  &USERSUB        INTERNAL TABLE OF ELEMENTS
         GBLC  &TABLE1(512)    ARBITRARY LIMIT OF 512 ELEMENTS
         ACTR  9999999
.*
         AIF   (&USERSUB GT 0).NXTPARM          STOP IF TABLE EMPTY
         MNOTE 16,'TABLE1 IS A REQUIRED PARAMETER'
         MEXIT
.*
.NXTPARM ANOP
.*
.STRT    ANOP
.*
         LCLC  &COMP1,&COMP2           HOLDER FOR COMPARE KEYS
         LCLC  &XTEMP                  HOLDER FOR ELEMENT SWAPS
         LCLA  &IPLUSG,&LPCNT,&IEX,&IMAX,&IGAP,&KLNG
.*
&IGAP    SETA  &USERSUB           SET GAP INDEX TO MAX TABLE BOUND
.*
.TPLOOP1 ANOP
.*
         AIF   (&IGAP LE 1).ENDSORT  RETURN IF GAP IS GONE, SORT DONE
&IGAP    SETA  &IGAP/2              CUT GAP IN HALF
&IMAX    SETA  &USERSUB-&IGAP
.*
.TPLOOP2 ANOP
&IEX     SETA  0                    EXCHANGE SWITCH
&LPCNT   SETA  1                    LOOP SUBSCRIPT
.*
.INLOOP  ANOP
.*
         AIF   (&LPCNT GT &IMAX).ELOOP    IS TABLE PASS COMPLETE
.*
&IPLUSG  SETA  &LPCNT+&IGAP              NO, RESET COMPARE POINTER
.*
&COMP1  SETC   '&TABLE1(&LPCNT)'(&KEYSTRT,&KEYLEN)
&COMP2  SETC   '&TABLE1(&IPLUSG)'(&KEYSTRT,&KEYLEN)
        AIF    ('&COMP1' NE '&COMP2').DOTEST
.*
.*   DUPLICATE ELEMENTS NOT ALLOWED
.*
        MNOTE  16,' &COMP1 HAS BEEN SPECIFIED MORE THAN ONCE'
        MEXIT
.*
.DOTEST ANOP
.*
&COMP1  SETC  '&TABLE1(&LPCNT)'(&KEYSTRT,&KEYLEN)
&COMP2  SETC  '&TABLE1(&IPLUSG)'(&KEYSTRT,&KEYLEN)
.*
&KLNG  SETA &KEYLEN
&COMP1 SETC '&COMP1'(1,K'&COMP1).(&KLNG-K'&COMP1)' '(1,&KLNG-K'&COMP1)
&COMP2 SETC '&COMP2'(1,K'&COMP2).(&KLNG-K'&COMP2)' '(1,&KLNG-K'&COMP2)
.*
         AIF   ('&SORT' EQ 'A').ASCEND      SORT IN ASCENDING SEQ
         AIF   ('&SORT' EQ 'D').DESCEND     SORT IN DESCENDING SEQ
.*                                          DEFAULT TO ASCENDING
.ASCEND  ANOP
         AIF   ('&COMP1' LT '&COMP2').CONT
         AGO   .CHKDONE
.DESCEND ANOP
         AIF   ('&COMP1' GT '&COMP2').CONT
.CHKDONE ANOP
.*
.*       EXCHANGE ELEMENTS IF UPPERMOST IS LESS THAN BOTTOMMOST
.*
.*
&XTEMP   SETC  '&TABLE1(&LPCNT)'
.*
&TABLE1(&LPCNT)  SETC '&TABLE1(&IPLUSG)'
.*
&TABLE1(&IPLUSG) SETC '&XTEMP'
.*
&IEX     SETA  1
.*
.CONT    ANOP
.*
&LPCNT   SETA  &LPCNT+1                AUGMENT LOOP FOR NEXT PASS
         AGO   .INLOOP
.ELOOP   ANOP
         AIF   (&IEX NE 0).TPLOOP2     NO EXCHANGES
         AGO  .TPLOOP1                 YES EXCHANGES
.*
.ENDSORT ANOP
         MEND
